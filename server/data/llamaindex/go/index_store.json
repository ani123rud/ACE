{"docstore/data":{"2f1a2116-46a3-4684-b4ec-7bf982989467":{"indexId":"2f1a2116-46a3-4684-b4ec-7bf982989467","nodesDict":{"8149f84a-08c5-4bb6-8967-b2d7c682473b":{"id_":"8149f84a-08c5-4bb6-8967-b2d7c682473b","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":0},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"d17941dc-ee7c-40a3-b0db-dda7ca831d5e","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":0},"hash":"Qq8RHSrPOWtHjDoWqlt+UUU5LDrah/LPQUoodagzFmo="}},"text":"Go Programming  i  About the Tutorial  Go language   is a programming language initially developed at Google in   the   year 2007 by  Robert Griesemer, Rob Pike, and Ken Thompson. It   is a statically - typed language   having  syntax similar to that of   C. It provides garbage collection, type safety, dynamic - typing  capability, many advanced built - in types such as variable length arrays and key - value  maps. It also provides a rich standard library. The Go programming language was   launched   in Nove mber 2009 and is used in some of  the Google's production systems. Audience  This tutorial is designed for software programmers with a need to understand the Go  programming language   from scratch. This tutorial will give you enough understanding on  G o programming language from where you can take yourself to higher level s   of expertise. Prerequisites  Before proceeding with this tutorial, you should have a basic understanding of   c omputer  p rogramming terminologies. If you have a good command over C, then it would be quite  easy for you   to   understand   the   concepts of   Go programming   and move fast on the learning  t rack. Disclaimer & Copyright     Copyright 2015 by Tutorials Point (I) Pvt. Ltd. All the content and graphics published in this e - book are the property of Tutorials Point (I)  Pvt. Ltd. The user of this e - book is prohibited to reuse, retain, copy, distribute or republish  any contents or a part of contents of this e - book in any manner wi thout written consent  of the publisher. We strive to update the contents of our website and tutorials as timely  and as precisely as possible, however, the contents may contain inaccuracies or errors. Tutorials Point (I) Pvt. Ltd. provides no guarantee rega rding the accuracy, timeline","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"pI9F7K7m2dpLUmcwsF3jIf41iOSWGmOyPa9d5R3DM98="},"6a6b4bec-6c56-4082-ba0d-6f56f30b7f2f":{"id_":"6a6b4bec-6c56-4082-ba0d-6f56f30b7f2f","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":1},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"1119ddda-2c99-42cc-8bc1-eec69715f1e2","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":1},"hash":"T+EjnsGs+9RaSUGouUlKY0NnJgEC7DOCbyJ+MEb9b4w="}},"text":"and tutorials as timely  and as precisely as possible, however, the contents may contain inaccuracies or errors. Tutorials Point (I) Pvt. Ltd. provides no guarantee rega rding the accuracy, timeliness or  completeness of our website or its contents including this tutorial. If you discover any  errors on our website or in this tutorial, please notify us at   contact@tutorialspoi nt.com . Go Programming  ii  Table of Contents  About the Tutorial   ................................ ................................ ................................ ................................ ..... i  Audience   ................................ ................................ ................................ ................................ .................... i  Prerequisites   ................................ ................................ ................................ ................................ .............. i  Table of Contents   ................................ ................................ ................................ ................................ ...... ii  1. GO PROGRAMMING   –   OVE RVIEW ................................ ................................ ......................... 1  Features of Go Programming   ................................ ................................ ................................ .................... 1  Features Excluded Intentionally   ................................ ................................ ................................ ................ 1  Go Programs   ................................ ................................ ................................ ................................ ............. 1  Compiling and Executing Go Programs   ................................ .........................","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"uN8JmTVwgkVC12bp59cyiJAfBOxoLWaoU0aFhy4npe0="},"781bc229-ecd8-4704-bddf-36e0cc1643b9":{"id_":"781bc229-ecd8-4704-bddf-36e0cc1643b9","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":2},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"f22badd6-5566-44d0-9f7e-80890cb78841","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":2},"hash":"8h5jFH18nZdvQUDMoKsr9fhV7QDH4+pbDZmNlYsk5l0="}},"text":".................. ................................ ................................ ............. 1  Compiling and Executing Go Programs   ................................ ................................ ................................ ...... 2  2. GO   PROGRAMMING   –   ENVIRO NMENT SETUP ................................ ................................ ....... 3  Try it Option Online   ................................ ................................ ................................ ................................ .. 3  Local Environment Setup   ................................ ................................ ................................ .......................... 3  Text Editor   ................................ ................................ ................................ ................................ ................ 3  The Go Compiler   ................................ ................................ ................................ ................................ ....... 4  Download Go Archive   ................................ ................................ ................................ ............................... 4  Installation on UNIX/Linux/Mac OS X, and FreeBSD   ................................ ................................ ................. 4  Installation on Windows   ................................ ................................ ................................ ........................... 5  Verifying the Installation ................................ ................................ ................................ ........................... 5  3. GO PROGRAM MING   –   PROGRAM STRUC TURE   ................................ ................................ ..... 6  Hello World Example   ........","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"ZHjPMxiABr9ScBVnsUFZb46hEH4ELTy5yrxvkLgFL1U="},"dbc6b230-aef6-4e3d-9cc2-d3206c3f3dbc":{"id_":"dbc6b230-aef6-4e3d-9cc2-d3206c3f3dbc","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":3},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"ffe42f54-c37d-45f1-956c-09d3c6ed2778","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":3},"hash":"TAC2V2lHaSsnXRWhw5TfWBNcIABphiJJ7J9IniybNBU="}},"text":"........... ........................... 5  3. GO PROGRAM MING   –   PROGRAM STRUC TURE   ................................ ................................ ..... 6  Hello World Example   ................................ ................................ ................................ ................................ 6  Executing a Go Program   ................................ ................................ ................................ ............................ 7  4. GO PROGRAMMING   –   BAS IC SYNTAX ................................ ................................ .................... 8  Tokens in Go   ................................ ................................ ................................ ................................ ............. 8  Line Separator ................................ ................................ ................................ ................................ ........... 8  Comments   ................................ ................................ ................................ ................................ ................ 8\nGo Programming  iii  Identifiers   ................................ ................................ ................................ ................................ ................. 9  Keywords   ................................ ................................ ................................ ................................ .................. 9  Whitespace in Go   ................................ ................................ ................................ ................................ ...... 9  5. GO PROGRAMMING   –   DAT A TYPES   ................................ ................................ ..................... 11  Integer Types   .................","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"+t+7BxEekKCZrAtypXMZiTxBifCx9HjLp0jVUD6/HPk="},"198f4651-d14f-4537-9782-4af97916133c":{"id_":"198f4651-d14f-4537-9782-4af97916133c","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":4},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"971eee80-1260-477c-b66b-e8194093ab67","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":4},"hash":"ZvLQg1tHISABakdwHGjHrJmo0Esn1kZ74F3IqFnaqeg="}},"text":".................... ...... 9  5. GO PROGRAMMING   –   DAT A TYPES   ................................ ................................ ..................... 11  Integer Types   ................................ ................................ ................................ ................................ .......... 11  Floating   Types   ................................ ................................ ................................ ................................ ......... 12  Other Numeric Types   ................................ ................................ ................................ .............................. 12  6. GO PROGRAMMING   –   VAR IABLES   ................................ ................................ ....................... 14  Variable Definition in Go   ................................ ................................ ................................ ......................... 14  Static Type Declaration in Go   ................................ ................................ ................................ .................. 15  Dynamic Type Declaration / Type Inference in Go   ................................ ................................ .................. 16  Mixed Variable Declaration in Go   ................................ ................................ ................................ ........... 16  The lvalues and the rvalues in Go ................................ ................................ ................................ ............ 17  7. GO   PROGRAMMING   –   CONST ANTS ................................ ................................ ..................... 18  Integer Literals   ................................ ................................ ..............................","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"fNG2g4zjnHKSGh/2uKyj8ek1Gfj28mZgyIjUM/rzETg="},"f0477400-1529-426e-beec-f2a307638218":{"id_":"f0477400-1529-426e-beec-f2a307638218","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":5},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"de028ccb-79d9-4c51-be6c-0f3a47513637","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":5},"hash":"V2O5XGrnbqcR+yKwCbsZijqZM8tYNf96ruDzQGo3h2I="}},"text":"....................... ................................ ..................... 18  Integer Literals   ................................ ................................ ................................ ................................ ........ 18  Floating - point Literals   ................................ ................................ ................................ ............................. 18  Escape Sequence   ................................ ................................ ................................ ................................ ..... 19  String Literals in Go   ................................ ................................ ................................ ................................ . 20  The   const   Keyword ................................ ................................ ................................ ................................ .. 20  8. GO PROGRAMMING   –   OPE RATORS   ................................ ................................ ..................... 22  Arithmetic Operators   ................................ ................................ ................................ .............................. 22  Relational Operators   ................................ ................................ ................................ ............................... 24  Logical Operators   ................................ ................................ ................................ ................................ .... 26  Bitwise   Operators   ................................ ................................ ................................ ................................ ... 27  Assignment Operators   ................................ ................................ .............................","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"sLTMZIpKwb7n3H6YBKhn8pFrrWSn3MZIkY8RjSHvUsA="},"6badc004-2594-489c-98f5-4d959a110ec7":{"id_":"6badc004-2594-489c-98f5-4d959a110ec7","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":6},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"92c50b2e-be20-4347-9c44-84f3fa5dfc77","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":6},"hash":"NC0cVz6RKF6x/VRv8jxeDFK8M5dX6RCXv8fFmZ1mi84="}},"text":"..... ................................ ................................ ... 27  Assignment Operators   ................................ ................................ ................................ ............................ 30  Miscellaneous Operators   ................................ ................................ ................................ ........................ 32\nGo Programming  iv  Operators Precedence in Go   ................................ ................................ ................................ ................... 33  9. GO PROGRAMMING   –   DEC ISION MAKING   ................................ ................................ .......... 36  The   if   Statement   ................................ ................................ ................................ ................................ ..... 37  The   if…else   Statement   ................................ ................................ ................................ ............................ 38  Nested   if   Statement   ................................ ................................ ................................ ................................ 40  The   Switch   Statement   ................................ ................................ ................................ ............................. 41  The   Select   Statement   ................................ ................................ ................................ .............................. 45  The   if...else if...else   Statement   ................................ ................................ ................................ ................ 46  10. GO PROGRAMMING   –   LOO PS   ................................ ................................ ......................","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"RuXiAOGgDVRfQ17bboTmrhguA5DtcFd45v5YXetaJsQ="},"3c4e922f-9ac3-421b-8aef-dfb88b27ebc8":{"id_":"3c4e922f-9ac3-421b-8aef-dfb88b27ebc8","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":7},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"7bf50b93-dbae-46c0-8516-fa53a41f5b6f","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":7},"hash":"KKI+jPhxuETNtfmd/y4u6Xn9OVEoHIciUKNmuY0Jcgk="}},"text":"................... ................................ ................ 46  10. GO PROGRAMMING   –   LOO PS   ................................ ................................ ............................. 49  for   Loop   ................................ ................................ ................................ ................................ .................. 49  Nested   for   Loops   ................................ ................................ ................................ ................................ ..... 53  Loop Control Statements   ................................ ................................ ................................ ........................ 55  The   continue   Statement   ................................ ................................ ................................ .......................... 57  The   goto   Statement   ................................ ................................ ................................ ................................ 59  The Infinite Loop   ................................ ................................ ................................ ................................ ..... 61  11. GO PROGRAMMING   –   FUN CTIONS   ................................ ................................ ..................... 63  Defining a Function   ................................ ................................ ................................ ................................ . 63  Calling   a Function   ................................ ................................ ................................ ................................ .... 64  Returning Multiple Values from Function   ................................ ................................ ............................... 6","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"AIb04jUEhm68aROBCw0lh23aJc81j92qA7P2mYqF8do="},"a632fc73-05ad-4a68-b59e-f777182f6487":{"id_":"a632fc73-05ad-4a68-b59e-f777182f6487","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":8},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"a599a219-6501-40b3-b089-5117f8068d30","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":8},"hash":"3cejrmSEwrRjFISfTeYJgK6KGF3MGxs2eSJ096Zxtuw="}},"text":"............ ................................ .... 64  Returning Multiple Values from Function   ................................ ................................ ............................... 65  Function Arguments ................................ ................................ ................................ ................................ 66  Call by Value   ................................ ................................ ................................ ................................ ........... 66  Call by Reference   ................................ ................................ ................................ ................................ .... 68  Function Usage   ................................ ................................ ................................ ................................ ....... 70  Function Closures ................................ ................................ ................................ ................................ .... 71  Method   ................................ ................................ ................................ ................................ ................... 72  12. GO PROGRAMMING   –   SCO PE RULES   ................................ ................................ ................... 74\nGo Programming  v  Local Variables   ................................ ................................ ................................ ................................ ........ 74  Global Variables   ................................ ................................ ................................ ................................ ...... 75  Formal Paramete rs   ................................ ................................ ................................ ...................","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"Y/c6bzHtQ4eJn32JzSnplz3NI5cPmg1SYj88dRqG9jA="},"a55e7eb5-70ab-4b6f-8cef-ff45085a2266":{"id_":"a55e7eb5-70ab-4b6f-8cef-ff45085a2266","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":9},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"4013a7b1-8721-447c-a2f8-67557cc766e6","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":9},"hash":"S5CRTHi1r+5HuYJ8HHbBTgKhGwbcxjMkwN6slMPwBJc="}},"text":".............. ................................ ...... 75  Formal Paramete rs   ................................ ................................ ................................ ................................ . 76  Initializing Local and Global Variables   ................................ ................................ ................................ ..... 77  13. GO PROGRAMMING   –   STR INGS   ................................ ................................ .......................... 78  Creating Strings   ................................ ................................ ................................ ................................ ....... 78  String Length   ................................ ................................ ................................ ................................ ........... 79  Concatenating Strings   ................................ ................................ ................................ ............................. 79  14. GO PROGRAMMING   –   ARR AYS ................................ ................................ ............................ 81  Declaring Arrays   ................................ ................................ ................................ ................................ ...... 81  Initializing Arrays   ................................ ................................ ................................ ................................ .... 81  Accessing Array Elements   ................................ ................................ ................................ ....................... 82  Go Arrays   in Detail   ................................ ................................ ................................ ................................ .. 83  Multidimensi","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"a8iJ4/LQdn/pdPvVD/4qrqMmTTmwGbuEmEoA22iDV9w="},"bc607ba5-ecc3-429c-8916-40288273a45a":{"id_":"bc607ba5-ecc3-429c-8916-40288273a45a","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":10},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"f71d47af-60a0-4ce1-aa49-1337eb98ff0e","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":10},"hash":"ThjzdpcK6yMmAuVVdDZb7KX6DUoGBB3OEtr0ajT0GnQ="}},"text":"................ 82  Go Arrays   in Detail   ................................ ................................ ................................ ................................ .. 83  Multidimensional Arrays in Go   ................................ ................................ ................................ ............... 83  Two - Dimensional Arrays   ................................ ................................ ................................ ......................... 84  Initializing Two - Dimensional Arrays   ................................ ................................ ................................ ........ 84  Accessing Two - Dimensional Array Elements   ................................ ................................ ........................... 84  Passing Arrays to Functions   ................................ ................................ ................................ .................... 86  15. GO PROGRAMMING   –   POI NTERS   ................................ ................................ ........................ 89  What Are Pointers? ................................ ................................ ................................ ................................ . 89  How to Use   Pointers? ................................ ................................ ................................ .............................. 90  Nil Pointers in Go   ................................ ................................ ................................ ................................ .... 91  Go Pointers in Detail   ................................ ................................ ................................ ............................... 91  Go   –   Array of Pointers   ................................ ...","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"cFtSUH9NPzZpniQNwaNGHJG6HyOZgZBDcGjM9w2qKSc="},"f5e8c55d-7270-4307-ba0e-1fd4b4ed5397":{"id_":"f5e8c55d-7270-4307-ba0e-1fd4b4ed5397","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":11},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"e65118d0-a026-442d-becd-e58ad84810a2","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":11},"hash":"Il1pabHqtcWHsoUG9DyXuLFgK+c2PI1328crmlZbDAo="}},"text":".............................. ................................ ................................ ............................... 91  Go   –   Array of Pointers   ................................ ................................ ................................ ............................. 92  Go   –   Pointer to Pointer   ................................ ................................ ................................ ........................... 93  Go   –   Passing Pointers to Functions   ................................ ................................ ................................ ......... 95\nGo Programming  vi  16. GO PROGRAMMING   –   STR UCTURES   ................................ ................................ ................... 97  Defining a Structure   ................................ ................................ ................................ ................................ 97  Accessing Structure Members   ................................ ................................ ................................ ................. 97  Structures as   Function Arguments   ................................ ................................ ................................ .......... 99  Pointers to Structures   ................................ ................................ ................................ ........................... 101  17. GO PROGRAMMING   –   SLI CES   ................................ ................................ ............................ 103  Defining a slice   ................................ ................................ ................................ ................................ ...... 103  len() and cap() functions   ................................ ................................ ......","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"p9J5PI4YkktR4JtWJ2nGxzR43F+KfECHgaSkIYAgxw8="},"a7af2024-d5af-448e-9257-ec35de19296d":{"id_":"a7af2024-d5af-448e-9257-ec35de19296d","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":12},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"a898ef64-6211-4928-b1a0-50655e9b74dd","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":12},"hash":"V5WnMPg1C//zqcrP3wl8jsaGjpfTvSQbrLLr4FoaHq0="}},"text":"................... ................................ ................................ ...... 103  len() and cap() functions   ................................ ................................ ................................ ....................... 103  Nil slice   ................................ ................................ ................................ ................................ ................. 104  Subslicing   ................................ ................................ ................................ ................................ .............. 104  append() and copy() Functions   ................................ ................................ ................................ .............. 106  18. GO PROGRAMMING   –   RAN GE   ................................ ................................ ........................... 108  19. GO PROGRAMMING   –   MAP S ................................ ................................ ............................. 110  Defining a Map   ................................ ................................ ................................ ................................ ..... 110  delete() Function ................................ ................................ ................................ ................................ ... 111  20. GO PROGRAMMING   –   REC URSION   ................................ ................................ ................... 113  Examples of Recursion in Go   ................................ ................................ ................................ ................. 113  21. GO PROGRAMMING   –   TYP E CASTING   ................................ ................................ ............... 115  22. GO PROGRAMMING   –   INT ERFACES","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"EMJ4lsLnqKnjSMGhg+hfc2jDKscPGUwH0aBpCMMKupc="},"5e2c490b-16c5-47b0-a2ae-135d0bbd09b3":{"id_":"5e2c490b-16c5-47b0-a2ae-135d0bbd09b3","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":13},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"8b575315-904a-42ef-a3f8-326e9b43fb9c","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":13},"hash":"o6J74dMcMvYXHBNG3+yECvhaL7pdSnX4EhSFD3zyC+c="}},"text":".... ................. 113  21. GO PROGRAMMING   –   TYP E CASTING   ................................ ................................ ............... 115  22. GO PROGRAMMING   –   INT ERFACES   ................................ ................................ ................... 116  23. GO PROGRAMMING   –   ERR OR HANDLING   ................................ ................................ ......... 119\nGo Programming  7  Go is a general - purpose language designed with systems programming in mind. It was initially  developed at Google in   the   year 2007 by Robert Griesemer, Rob Pike, and Ken Thompson. It  is strongly and statically typed, provides inbuilt support for garbage collection ,   and supports  concurrent programming. Programs are constructed using packages, for e fficient management of dependencies. Go  programming   implementations   use   a   traditional   compile   and   link   model   to   generate  executable binaries. The Go programming language was announced in November 2009 and  is used in some of the Google's production systems . Features of Go Programming  The most important features of Go programming are listed below:     Support for environment adopting patterns similar to dynamic languages. For example ,  type inference (x := 0 is valid declaration of a variable x of type int)     Compilation time is fast.    In b uilt concurrency support: light weight processes (via go   routines), channels, select  statement.    Go programs are simple, concise, and safe.    Support for Interfaces and Type embedding.    Production of statically linked native binaries without external dependencies. Features   E xcluded   I ntentionally  To keep   the   language simple and concise,   the   following features commonly available in","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"XBttl82ixPTZQj7H1VgB+OamQDrLFFmaTFbYK+jN3mY="},"8de8a7b5-dae5-4cc9-b389-9a33d4656958":{"id_":"8de8a7b5-dae5-4cc9-b389-9a33d4656958","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":14},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"9ca5ee9a-d36d-4434-9371-73dc6d2c601b","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":14},"hash":"3FD5YkgRlGx47moOGOI3P0oMSu4ZndTSFrtDUYJM3Rg="}},"text":"f statically linked native binaries without external dependencies. Features   E xcluded   I ntentionally  To keep   the   language simple and concise,   the   following features commonly available in   other  similar languages are o m itted   in   Go :     S upport for type inheritance     S upport for method or operator overloading     S upport for circular dependencies among packages     S upport for pointer   arithmetic     S upport for assertions     S upport for generic programming  1. GO PROGRAMMING   –   Overview\nGo Programming  8  Go Programs  A Go program can vary   in length   from 3 lines to millions of lines and it should be written into  one or more text files with   the   extension \".go\" . F or example, hello. go. You can use \"vi\", \"vim\" or any other text editor to write your Go program into a file. Compil ing and   Execut ing   Go Programs  For most of the examples given in this tutorial, you will find   a   Try it   option, so just make use  of it and enjoy your   learning. Try   the   following example using   the   Try it   option available at the top right corner of the  following sample code:  package main  import \"fmt\"  func main() {  fmt.Println(\"Hello, World! \")  }\nGo Programming  9  Try it Option   Online  You really do not need to set up your own environment to start learning Go programming  language. Reason is very simple, we already have set up Go Programming environment  online, so that you can compile and execute all the available examples online a t the same  time when you are doing your theory work. This gives you confidence in what you are reading and to check the result with different  options. Feel free to modify any example and execute it online. Try   the   following example using   the   Try it   option available at th","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"9n7iJDv5A6Qv+hUQJTamx/OdYqjSlZgOh1xH1X5fpr8="},"994c12f6-e2fd-4c98-8f34-ef6bfca4bf58":{"id_":"994c12f6-e2fd-4c98-8f34-ef6bfca4bf58","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":15},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"5049dcda-1de8-4b2c-a8c4-57bb4ce5efcf","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":15},"hash":"Dll3N6IWl8x4xCXy1F7jj5r5eTmiy7CkrwkrKjO4gwE="}},"text":"hat you are reading and to check the result with different  options. Feel free to modify any example and execute it online. Try   the   following example using   the   Try it   option available at the top right corner of the  following   sample code   displayed on our website :  package   main  import   \"fmt\"  func main ()   {  fmt . Println ( \"Hello, World! \" )  }  For most of the examples given in this tutorial, you will find   a   Try it   option . Local Environment Setup  If you are still willing to set up your environment for Go programming language, you need  the following two software   available on your computer :     A   t ext   e ditor     Go   c ompiler  Text Editor  You will require a text editor to type your programs. Examples of   text   editors include Windows  Notepad, OS Edit command, Brief, Epsilon, EMACS, and vim or vi. The   n ame   and version of text editor s   can vary on different operating systems. For example,  Notepad   is   used on Windows, and vim or vi   is   used on   W indows as well as Linux or UNIX. 2. GO PROGRAMMING   –   Environment Setup\nGo Programming  10  The files you create with   the   text   editor are called   source files . They   contain program source  code. The source files for Go programs are typically named with the extension \" .go \". Before starting your programming, make sure you have   a   text editor in place and you have  enough experience to write a computer program,   save it in a file, compile it ,   and finally  execute it. The Go Compiler  The source code written in source file is the human readable source for your program. It  needs to be   compiled   and   turn ed   into machine language so that your CPU can actually execu te  the program as per   the   instructions given. The   Go programming","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"Na2p1S/uwEVAZ37foNV4XLvBeSZ2X7KMV3zKCmxiqsE="},"511de2a4-bc0c-4c12-a127-35c76e4e1b7b":{"id_":"511de2a4-bc0c-4c12-a127-35c76e4e1b7b","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":16},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"087834f0-5aad-4967-9a97-af2ec08965c5","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":16},"hash":"9CXtsq/SD7wBYLUGNYne9rv70HseKQORjR7RfVn1cxE="}},"text":"urce for your program. It  needs to be   compiled   and   turn ed   into machine language so that your CPU can actually execu te  the program as per   the   instructions given. The   Go programming language compiler   compile s  the   source code into   its   final executable program. Go distribution comes as a binary installable for FreeBSD (release 8 and above), Linux, Mac  OS X (Snow Leopard and above), and Windows operating systems with   32 - bit (386) and 64 -  bit (amd64) x86 processor architectures. The   f ollowing section   explains   how to install Go binary distribution on various OS. Download Go   A rchive  Download   the   latest version of Go installable archive file from   Go Downloads . The following  version is used in this tutorial:   go1.4.windows - amd64.msi . It is   copied it into C: \\ >go folder. OS   Archive name  Windows   go1.4.windows - amd64.msi  Linux   go1.4.linux - amd64.tar.gz  Mac   go1.4.darwin - amd64 - osx10.8.pkg  FreeBSD   go1.4.freebsd - amd64.tar.gz  Installation on UNIX/Linux/Mac OS X, and FreeBSD  Extract the download archive into   the   folder   /usr/local, creating a Go tree in /usr/local/go. For  example:  tar   - C /usr/local   - xzf go1.4.linux - amd64.tar.gz  Add /usr/local/go/bin to   the PATH environment variable. Go Programming  11  OS   Output  Linux   export PATH=$PATH:/usr/local/go/bin  Mac   export PATH=$PATH:/usr/local/go/bin  FreeBSD   export PATH=$PATH:/usr/local/go/bin  Installation on Windows  Use the MSI file and follow the prompts to install the Go tools. By default, the installer uses  the Go distribution in c: \\ Go. The installer should set the c: \\ Go \\ bin directory in   W indow's PATH  environment variable. Restart any open command prompts for the   change to take effect. Verify ing   the   I","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"6MirA7RKAVS9MJ0pPM+pJ9OsspYWyIMWahvgEbEi6PI="},"e602b541-201c-43fc-8f98-1bd3252487a7":{"id_":"e602b541-201c-43fc-8f98-1bd3252487a7","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":17},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"2ea5c0ec-3c81-4ecd-8332-6a23e7c3729e","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":17},"hash":"wwfp612G8TxpbiLsa5hSutqrfOYwcKlN46dtu30kCgw="}},"text":"tion in c: \\ Go. The installer should set the c: \\ Go \\ bin directory in   W indow's PATH  environment variable. Restart any open command prompts for the   change to take effect. Verify ing   the   I nstallation  Create a go file named test.go in   C: \\ >Go_WorkSpace . File: test.go  package   main  import   \"fmt\"  func main ()   {  fmt . Println ( \"Hello, World! \" )  }  Now run   test.go to see the result:  C : \\ Go_WorkSpace > go run   test . go  Output  Hello, World! Go Programming  12  Before we study   the   basic building blocks of   Go programming language, let us   first discuss  the   bare   minimum   structure   of   Go   program s   so   that   we   can   take   it   as   a   reference   in  subsequent   chapters. Hello World Example  A Go program basically consists of the following parts:     Package Declaration     Import Packages     Functions     Variables     Statements   and   Expressions     Comments  Let us look at   a simple code that would print the words \"Hello World ! \":  package   main  import   \"fmt\"  func main ()   {  /* This is my first sample program. */  fmt . Println ( \"Hello, World! \" )  }  Let us   take a   look   at the   various parts of the above program:  1. The first line of   the program   package   main   defines the package name in which this program should lie. It is  a   mandatory   statement ,   as Go programs run   in packages. The   main   package is the starting point to run the  program. Each package has a path and name associated with it. 2. The next line   import \"fmt\"   is a preprocessor command which tell s   the Go compiler to include   the   files lying  in   the   package fmt. 3. The next line   func mai n()   is the main function where   the   program execution begins. 3. GO PROGRAMMING   –   Pro","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"+TFeFeGP9KQBb+LF8zRY3jiPj0UtNrcupc3RFeP2hV8="},"71a9c2b3-5b6a-4ffa-90cd-132081436bbe":{"id_":"71a9c2b3-5b6a-4ffa-90cd-132081436bbe","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":18},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"4820c84b-9d19-4800-ab02-7e21b5ab7e28","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":18},"hash":"6LRnUyCq7jWWNZn5FxX8zyWwEJwZ85rFzlEpCLOcTC0="}},"text":"the Go compiler to include   the   files lying  in   the   package fmt. 3. The next line   func mai n()   is the main function where   the   program execution begins. 3. GO PROGRAMMING   –   Program Structure\nGo Programming  13  4. The next line /*...*/   is   ignored by the compiler and it   is there   to add   comments in the program. Comments  are also   represented using // similar to Java or C++ comments. 5. The next line   fmt.Println(... )   is another function available in Go which causes the message \"Hello, World! \"  to be displayed on the screen. Here fmt package has exported Println method which is used to   display   the  message on the screen. 6. Notice the capital P of Println method. In Go language, a name is exported if it starts with capital letter. Exported means   the   function or variable/constant is accessible to   the   importer of the respective packag e. Execut ing   a   Go Program  Let   u s   discuss how to save   the source code in a file,   compile it, and finally execute the  program . Please follow the steps given below :  1. Open a text editor and add the above - mentioned code. 2. Save the file as   hello.go  3. Open   the   command prompt . 4. G o to the directory where you saved the file. 5. Type   go run hello.go   and press enter to run your code. 6. If there are no errors in your code ,   then you will   see   \"Hello World ! \"   printed on the screen. $ go run hello.go  Hello, World! Make sure   the Go   compiler is in your path and that you are running it in the directory  containing   the   source file hello.go. Go Programming  14  We discussed   the   basic structure of   a   Go program   in the previous chapter. Now   it will be easy  to understand   the   other basic building blocks of the Go","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"y0iWJWgVxM1WgMDbobU9O3aX/kStQqqQTI5TczRy+Sg="},"d327a00c-db7b-4146-93f3-0b5f777d6fe4":{"id_":"d327a00c-db7b-4146-93f3-0b5f777d6fe4","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":19},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"6757d36c-3577-4e8c-9bbf-56bab0730059","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":19},"hash":"FAR1tcw7ua5EVVlWNWFPqsTeitJJVrISfrvceiax6J8="}},"text":"ile hello.go. Go Programming  14  We discussed   the   basic structure of   a   Go program   in the previous chapter. Now   it will be easy  to understand   the   other basic building blocks of the Go programming language. Tokens in Go  A Go program consists of various tokens . A   token is either a keyword, an identifier, a constant,  a string literal, or a symbol. For example, the following Go statement consists of six tokens:  fmt . Println ( \"Hello, World! \" )  The individual tokens are:  fmt  . Println  (  \"Hello, World! \"  )  Line   Separator  In   a   Go   program,   the   line   separator   key   is   a   statement   terminator. That   is,   individual  statement s   don't need a special   separator   like   “ ; ”   in C. The   Go compiler internally places   “ ; ”  as   the   statement terminator to indicate   the end of one logical entity. For example,   take a look at the   following   statements:  fmt . Prin tln ( \"Hello, World! \" )  fmt . Println ( \"I am in Go Programming World! \" )  Comments  Comments are like helping text s   in your Go program and they are ignore d by the compiler. They start with /* and terminate   with the characters */ as shown below:  /* my first program in Go */  4. GO PROGRAMMING   –   Basic   Syntax\nGo Programming  15  You   cannot   have   comments   within   comments and   they do   not   occur within   a   string   or  character literals. Identifiers  A Go identifier is a   name used to identify a variable, function, or any other user - defined item. An identifier starts with a letter A to Z or a to z or an underscore _ followed by zero or more  letters, underscores, and digits (0 to 9). identifier = letter { letter | unicode_di git } . Go does not allow punctuation characters such as @, $, and % within identifiers.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"zvbZckWt0wPy2lwozyrA6THLPljKQPdp/f1SvUjYoHM="},"ab797073-134b-4900-85e5-b4fd06ffe1b2":{"id_":"ab797073-134b-4900-85e5-b4fd06ffe1b2","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":20},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"23c90f4c-47cb-4f9d-abe9-25cac017f426","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":20},"hash":"Gb86u+wNOcoSromdzvFEca9M6E3aJYsJN6Fn3PlG32g="}},"text":"ollowed by zero or more  letters, underscores, and digits (0 to 9). identifier = letter { letter | unicode_di git } . Go does not allow punctuation characters such as @, $, and % within identifiers. Go is a   case -  sensitive   programming   language. Thus,   Manpower   and   manpower   are   two   different  identifiers in Go. Here are some examples of acceptable identifiers:  mahesh   kumar   abc   move_name   a_123  myname50   _temp   j   a23b9   retVal  Keywords  The following list shows the reserved words in Go. These reserved words may not be used as  constant or variable or any other identifier names. break   Default   Func   interf ace   Select  case   Defer   Go   map   Struct  chan   Else   Goto   package   Switch  const   fallthrough   if   range   Type  continue   For   import   return   Var  Whitespace in Go  Whitespace   is   the   term   used   in   Go   to   describe   blanks,   tabs,   newline   characters ,   and  comments. A line   containing only whitespace, possibly with a comment, is known as a blank  line, and a Go compiler totally ignores it. Whitespace s   separate   one part of a statement from another and enables the compiler to  identify where one element in a statement, such as int, ends and the next element begins. Therefore, in the following statement:  var   age   int ;\nGo Programming  16  There must be at least one whitespace character   (usually a space) between int and age for  the compiler to be able to distinguish them. On the other hand, in the following statement:  fruit   =   apples   +   oranges ;   // get the total fruit  No whitespace characters are necessary between fruit and =, or between   = and apples,  although you are free to include some if you wish for readability purpose. Go Programming  17  In the Go program","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"wfPL2E4hfJY5TLl5/+cVgBLTQpJfGzODuzv51Fx+7Gg="},"a5498e38-02ef-445c-89bf-4f084fffc586":{"id_":"a5498e38-02ef-445c-89bf-4f084fffc586","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":21},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"a72d64cb-6b3a-4dba-9577-cfb31025f425","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":21},"hash":"qfbWC1q20x3pdJvY7Ta7KGW+XbOD+0Lv1H5bGxeV7Lc="}},"text":"No whitespace characters are necessary between fruit and =, or between   = and apples,  although you are free to include some if you wish for readability purpose. Go Programming  17  In the Go programming language, data types refer to an extensive system used for declaring  variables or functions of different types. Th e type of a variable determines how much space  it occupies in storage and how the bit pattern stored is interpreted. The types in Go can be classified as follows:  Sr. No. Types and Description  1  Boolean   t ypes  They are boolean types and consists of the   two predefined constants: (a)  true (b) false  2  Numeric   t ypes  They are again arithmetic types and they represents a) integer types or b)  floating point values throughout the program. 3  S tring types  A string type represents the set of string values. Its   value is a sequence of  bytes. Strings are immutable types . T hat is ,   once   they are   created, it is not  possible to change the contents of a string. The predeclared string type is  string. 4  Derived types  They include (a) Pointer types, (b) Array types, (c ) Structure types, (d)  Union types and (e) Function types f) Slice types g) Function types h)  Interface types i) Map types j) Channel Types  A rray types and structure types are   collectively   referred to   as   aggregate types . The type of  a function specifies the set of all functions with the same parameter and result types. We will  discuss the   basic types in the following section, whereas   other types will be covered in the  upcoming chapters. Integer Types  The predefine d   architecture - independent integer types are:  Sr. No. Types and Description  5. GO PROGRAMMING   –   Data Types\nGo Programming  18  1   uint8  Unsigned 8 - bit integers (0 to 255","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"hH1AySSGHf1CUxDOfBhfVwdcPtkqXZZLf6I3c8Grd1o="},"757a10bf-39ac-4cc0-86b0-7c51bf3d62fe":{"id_":"757a10bf-39ac-4cc0-86b0-7c51bf3d62fe","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":22},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"1a9e6c93-2d1d-43c2-bbf5-633a6845e059","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":22},"hash":"tdQ84EId7kgCYV9seLtOZGuECBr+buUnQ+Pvej3pJ7Y="}},"text":"he predefine d   architecture - independent integer types are:  Sr. No. Types and Description  5. GO PROGRAMMING   –   Data Types\nGo Programming  18  1   uint8  Unsigned 8 - bit integers (0 to 255)  2   uint16  Unsigned 16 - bit integers (0 to 65535)  3   uint32  Unsigned 32 - bit integers (0 to 4294967295)  4   uint64  Unsigned 64 - bit integers   (0 to 18446744073709551615)  5   int8  Signed 8 - bit integers ( - 128 to 127)  6   int16  Signed 16 - bit integers ( - 32768 to 32767)  7   int32  Signed 32 - bit integers ( - 2147483648 to 2147483647)  8  int64  Signed 64 - bit integers  ( - 9223372036854775808 to   9223372036854775807)  Floating Types  The predefine d   architecture - independent float types are:  Sr. No. Types and Description  1   float32  IEEE - 754 32 - bit floating - point numbers  2   float64  IEEE - 754 64 - bit floating - point numbers  3   complex64  Complex numbers   with float32 real and imaginary parts  4   complex128  Complex numbers with float64 real and imaginary parts\nGo Programming  19  The value of an n - bit integer is n bits and is represented using two's complement arithmetic  operations. Other Numeric Types  There is also a set of   numeric types with implementation - specific sizes:  Sr. No. Types and Description  1   byte  same as uint8  2   rune  same as int32  3   uint  32 or 64 bits  4   int  same size as uint  5   uintptr  an unsigned integer to store the uninterpreted bits of a pointer value\nGo Programming  20  A variable is nothing but a name given to a storage area that   the   programs can manipulate. Each variable in Go has a specific type, which determines the size and layout of the variable's  memory ,   the range of values that can be stored within that memory ,   and the set of operations  that can be applied","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"KG3EBb8pB0xB5Ctp1sJUU1RbegxKjwZsrMneU5Nllyg="},"da2f3610-6183-4546-b457-19a019a39b18":{"id_":"da2f3610-6183-4546-b457-19a019a39b18","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":23},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"4a2d75c0-a81b-4cac-a8fe-da96e1f0aa88","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":23},"hash":"RF8bPJKUXSmyHGvA//y646k5SST3+eVwYWYEJg+9WRc="}},"text":"Go has a specific type, which determines the size and layout of the variable's  memory ,   the range of values that can be stored within that memory ,   and the set of operations  that can be applied to the variable. The name of a variable can be composed of letters, digits, and the underscore character. It  must begin with either a letter or an un derscore. Upper and lowercase letters are distinct  because Go is case - sensitive. Based on the basic types explained in   the   previous chapter,  there will be the following basic variable types:  Type   Description  byte   Typically a single octet(one byte). This   is an byte type. int   The most natural size of integer for the machine. float32   A single - precision floating point value. Go programming language also allows to define various other types of variables   such as  Enumeration, Pointer,   Array, Structure,   and   Union,   which   we will   discuss in   subsequent  chapters. In this chapter, we will focus only   basic variable types. Variable Definition   in Go  A variable definition   tell s   the compiler where and how much   storage   to create   for the variable. A variable definition specifies a data type and contains a list of one or more variables of that  type as follows:  var   variable_list optional_data_type ;  Here,   optional_data_type   is a valid Go data type including byte, int, float32, complex64,  boolean or any user - defined object, etc., and   variable_list   may consist of one or more  identifier names separated by commas. Some valid declarations are shown here:  var   i ,   j ,   k   int ;  var   c ,   ch   byte ;  var   f ,   salary float32 ;  d   =   42 ;  6. GO PROGRAMMING   –   Variables\nGo Programming  21  The   statement   “ var i, j, k; ”   declares and defines the variab","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"HVMwnQoyfDIaqdV23NIQb/q66vy7v8pCRESE8gaDfrs="},"985f46c5-4c7a-4efe-8cec-9e1617fc720c":{"id_":"985f46c5-4c7a-4efe-8cec-9e1617fc720c","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":24},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"0f529fef-cc32-4da9-98c7-763f80d6e88f","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":24},"hash":"g/l5Jt73UTmPQz1dV7v1WzETojMwl/FP59JhX8H8Hd8="}},"text":"int ;  var   c ,   ch   byte ;  var   f ,   salary float32 ;  d   =   42 ;  6. GO PROGRAMMING   –   Variables\nGo Programming  21  The   statement   “ var i, j, k; ”   declares and defines the variables i, j and k; which instructs the  compiler to create variables named i, j ,   and k of type int. Variables can be   initialized (assigned an initial value) in their declaration. The type of variable  is automatically judged by the compiler based on the value passed to it. The initializer consists  of an equal sign followed by a constant expression as follows:  variable_nam e   =   value ;  For example,  d   =   3 ,   f   =   5 ;   // declaration of d and f. Here d and f are int  For   definition   without   an   initializer:   variables   with   static   storage   duration   are   implicitly  initialized with nil (all bytes have the value 0); the   initial value of all other variables is zero  value of their data type. Static   T ype   D eclaration   in Go  A static type variable declaration provides assurance to the compiler that there is one variable  available   with   the   given   type   and   name   so   that   the   compiler   can   proceed   for   further  compilation without   requiring the   complete detail   of   the variable. A variable declaration has  its meaning at the time of compilation only,   the   compiler needs   the   actual variable declaration  at the time of li nking of the program. Example  Try   the   following example, where   the   variable has been declared with a type   and   initialized  inside the main function:  package   main  import   \"fmt\"  func main ()   {  var   x float64  x   =   20.0  fmt . Println ( x )  fmt . Printf ( \"x is of type %T \\ n\" ,   x )  }  When the above code is compiled and executed, it produces the following res","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"ZSRmDhV2xTqr9oukSPnozoLMOcQpS1CICabBRZm0TsU="},"f7509354-39b2-47c3-bfa5-d3ca5ca6d679":{"id_":"f7509354-39b2-47c3-bfa5-d3ca5ca6d679","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":25},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"934df6aa-bc9c-47c6-a8d0-1ec1436fdb03","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":25},"hash":"VfyNpJWlbmME8Kyfy9BoGG2x8sdViQWzIECYWM3Xy+Q="}},"text":"fmt\"  func main ()   {  var   x float64  x   =   20.0  fmt . Println ( x )  fmt . Printf ( \"x is of type %T \\ n\" ,   x )  }  When the above code is compiled and executed, it produces the following result:\nGo Programming  22  20  x is of type float64  Dynamic   T ype   D eclaration / Type Inference   in Go  A dynamic type variable declaration requires   the   compiler to interpret the type of   the   variable  based on   the   value passed to it. The   c ompiler   does not require   a variable to have type  statically as a necessary requirement. Example  Try   the   following example, where   the   variables have been decl ared without any type . Notice,  in case of type inference, we   initialized the variable   y   with   :=   operator ,   where as   x   is initi a lized  using   =   operator. package   main  import   \"fmt\"  func   main ()   {  var   x float64   =   20.0  y   :=   42  fmt . Println ( x )  fmt . Println ( y )  fmt . Printf ( \"x is of type %T \\ n\" ,   x )  fmt . Printf ( \"y is of type %T \\ n\" ,   y )  }  When the above code is compiled and executed, it produces the following result:  20  42  x is of   type   float64  y is of type int\nGo Programming  23  Mixed   V ariable   D eclaration   in Go  Variables of different types can be declared in one go using type inference. Example  package   main  import   \"fmt\"  func main ()   {  var   a ,   b ,   c   =   3 ,   4 ,   \"foo\"  fmt . Println ( a )  fmt . Println ( b )  fmt . Println ( c )  fmt . Printf ( \"a is of type %T \\ n\" ,   a )  fmt . Printf ( \"b is of type %T \\ n\" ,   b )  fmt . Printf ( \"c is of type %T \\ n\" ,   c )  }  When the above code is compiled and executed, it produces the following result:  3  4  foo  a is of type int  b is of type   int  c is of type string  The l values and   the   r","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"uprPH2ao6pkcAX005AAEYqdYKf3ZgdmwiQSKPlqnJN8="},"b1c2185c-1603-441c-874a-bc25df9a7ed2":{"id_":"b1c2185c-1603-441c-874a-bc25df9a7ed2","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":26},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"a4adb000-0624-4275-8169-f5d488e64516","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":26},"hash":"pirgalo2qPPPk02Y2Qra6IApuy6EfO2fnPA7+BtNCuw="}},"text":"e %T \\ n\" ,   c )  }  When the above code is compiled and executed, it produces the following result:  3  4  foo  a is of type int  b is of type   int  c is of type string  The l values and   the   r values in Go  There are two kinds of expressions in Go:  1. lvalue :   Expressions that refer to a memory location is called \"lvalue\" expression. An lvalue may appear as  either the left - hand or right - hand side of an   assignment. 2. rvalue :   The term rvalue refers to a data value that is stored at some address in memory. An rvalue is an  expression that cannot have a value assigned to it which means an rvalue may appear on the right -   but not  left - hand side of an   assignment. Go Programming  24  Variables are lvalues and so may appear on the left - hand side of an assignment. Numeric  literals are rvalues and so may not be assigned and can not appear on the left - hand side. The   f ollowing   statement   is   valid :  x   =   20.0  The   following   statement   is not   valid . It   would generate compile - time error:  10   =   20\nGo Programming  25  C onstants refer to fixed values that the program may not alter during its execution. These  fixed values are also called   literals . Constants can be of any of the basic data types like   an integer constant, a floating constant,  a character constant, or a string literal . There are also enumeration constants as well. C onstants   are treated just like regular variables except   that their values cannot be modified  after their definition. Integer   L iterals  An integer literal can be a decimal, octal, or hexadecimal constant. A prefix specifies the base  or radix: 0x or 0X for hexadecimal, 0 for octal, and nothing for decimal. An int eger literal can also have a suffix that is a combination of U an","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"Xgy1aJUP/sWEHoTw/0BSqsCCqQavaFmpabpBFUIvDeQ="},"d71bcb7c-ff20-4f4d-a201-4669059065d0":{"id_":"d71bcb7c-ff20-4f4d-a201-4669059065d0","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":27},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"18746678-ef17-4f28-b8fb-a59efbffc815","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":27},"hash":"fTcIJd9Dn2Jv0xp+12vvN6OXTJNbMPXAkiavJrdA8Ng="}},"text":"r hexadecimal constant. A prefix specifies the base  or radix: 0x or 0X for hexadecimal, 0 for octal, and nothing for decimal. An int eger literal can also have a suffix that is a combination of U and L, for unsigned and  long, respectively. The suffix can be uppercase or lowercase and can be in any order. Here are some examples of integer literals:  212   /* Legal */  215u   /*   Legal */  0xFeeL   /* Legal */  078   /* Illegal: 8 is not an octal digit */  032UU   /* Illegal: cannot repeat a suffix */  Following are other examples of various type of Integer literals:  85   /* decimal */  0213   /* octal */  0x4b   /* hexadecimal */  30   /* int */  30u   /* unsigned int */  30l   /* long */  30ul   /* unsigned long */  7. GO PROGRAMMING   –   Constants\nGo Programming  26  Floating - point   L iterals  A floating - point literal has an integer part, a decimal point, a fractional part, and an exponent  part. You can represent floating point literals either in decimal form or exponential form. While representing using decimal form, you must include the decimal point, the exponent, or  both and while representing using exponential form, you must include the   integer part, the  fractional part, or both. The signed exponent is introduced by e or E. Here are some examples of floating - point literals:  3.14159   /* Legal */  314159E - 5L   /* Legal */  510E   /* Illegal: incomplete exponent */  210f   /* Illegal: no decimal or exponent */  . e55   /* Illegal: missing integer or fraction */  Escape   S equence  W hen   certain characters   are preceded by a backslash ,   they will have   a   special meaning   in Go. These are   known as Escape Sequence codes which   are used to represent   newline ( \\ n) ,   tab  ( \\ t) , backspace, etc . Here, you have a list of some","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"0C82hASwrca7mRdEMhuubhD/EV9x2F+56BhFnXB9iQI="},"89b8db19-db4e-4a08-86f8-7f91ef444288":{"id_":"89b8db19-db4e-4a08-86f8-7f91ef444288","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":28},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"5820063c-37be-476a-be7e-e33b6feaa2fb","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":28},"hash":"DYTd7500AGQXprDPvm8LoaSzqPRycXlM7KvZF85ohCI="}},"text":"ey will have   a   special meaning   in Go. These are   known as Escape Sequence codes which   are used to represent   newline ( \\ n) ,   tab  ( \\ t) , backspace, etc . Here, you have a list of some of such escape sequence codes:  Escape sequence   Meaning  \\ \\   \\   character  \\ '   ' character  \\ \"   \" character  \\ ? ? character  \\ a   Alert or bell  \\ b   Backspace  \\ f   Form feed  \\ n   Newline  \\ r   Carriage return\nGo Programming  27  \\ t   Horizontal tab  \\ v   Vertical tab  \\ ooo   Octal number of one to three digits  \\ xhh . . . Hexadecimal number of one or more digits  The   f ollowing   example   show s   how to use   \\ t   in a program:  package   main  import   \"fmt\"  func main ()   {  fmt . Printf ( \"Hello \\ tWorld! \" )  }  When the above code is compiled and executed, it produces the following result:  Hello   World! String   L iterals   in Go  String literals or constants are enclosed in double quotes \"\". A string contains characters that  are similar to character literals: plain characters, escape sequences, and universal characters. You can break a long line into multiple lines using str ing literals and separating them using  whitespaces. Here are some examples of string literals. All the three forms are identical strings. \"hello, dear\"  \"hello,   \\  dear\"\nGo Programming  28  \"hello, \"   \"d\"   \"ear\"  The   const   Keyword  You can use   const   prefix to declare constants   with a specific type as follows:  const   variable type   =   value ;  The   f ollowing example   shows how to use the   const   keyword:  package   main  import   \"fmt\"  func main ()   {  const   LENGTH   int   =   10  const   WIDTH   int   =   5  var   area   int  area   =   LENGTH   *   WIDTH  fmt . Printf ( \"value of area : %d\" ,   area )  }  When the above code is c","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"Lk+aUP7ciHsXj4HzPkHcY65Mfs2p/SfhCyYNFnuD/14="},"f6ef2f15-324c-4e0c-b641-20fe8b836fc5":{"id_":"f6ef2f15-324c-4e0c-b641-20fe8b836fc5","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":29},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"42f15724-7815-44ee-abee-3330bb43f358","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":29},"hash":"iflLtP7QMousxP3FHHqex4Hsjh/7VObLhGv4qXTC87E="}},"text":"nc main ()   {  const   LENGTH   int   =   10  const   WIDTH   int   =   5  var   area   int  area   =   LENGTH   *   WIDTH  fmt . Printf ( \"value of area : %d\" ,   area )  }  When the above code is compiled and executed, it produces the following result:  value of area : 50  Note that it is a good programming practice to define constants in CAPITALS. Go Programming  29  An operator is a symbol that tells the compiler to perform specific mathematical or logical  manipulations. Go language is rich in built - in operators and provides the following types of  operators:     Arithmetic Operators     Relational Oper ators     Logical Operators     Bitwise Operators     Assignment Operators     Misc ellaneous   Operators  This tutorial   explain s   arithmetic, relational, logical, bitwise, assignment ,   and other operators  one by one. Arithmetic Operators  Following   table   shows   all   the   arithmetic   operators   supported   by   Go   language. Assume  variable   A   holds 10 and variable   B   holds 20 then:  Operator   Description   Example  +   Adds two operands   A + B   give s   30  -   Subtracts second operand from the first   A   -   B   give s   - 10  *   Multiplies   both operands   A * B   give s   200  /   Divides   the   numerator by   the denominator. B / A   give s   2  %   M odulus   o perator ;   gives   the   remainder   after  an integer division . B % A   give s   0  ++   I ncrement   operator . It   increases   the   integer  value by one . A++   give s   11  --   D ecrement   operator . It   decreases   the   integer  value by one . A --   give s   9  8. GO   PROGRAMMING   –   Operators\nGo Programming  30  Example  Try   the   following   example   to   understand   all   the   arithmetic   operators   available   in   Go  pro","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"zBGFplJF1aEQwdSx4zcLeGY3+6rbMaUw3eq9LjjS/6k="},"91df422a-8dca-4fe6-ba14-c51e75fd351c":{"id_":"91df422a-8dca-4fe6-ba14-c51e75fd351c","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":30},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"c55f4492-d8f4-4d20-8aa3-ac708454f24d","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":30},"hash":"UnVFw9scNeCiGuvbVhS+PFdkFJpGa6trd6AByFIAEBE="}},"text":"A --   give s   9  8. GO   PROGRAMMING   –   Operators\nGo Programming  30  Example  Try   the   following   example   to   understand   all   the   arithmetic   operators   available   in   Go  programming   language:  package main  import \"fmt\"  func main() {  var a int = 21  var b int = 10  var c int  c = a + b  fmt.Printf(\"Line 1   -   Value of c is %d \\ n\", c )  c = a   -   b  fmt.Printf(\"Line 2   -   Value of c is %d \\ n\", c )  c = a * b  fmt.Printf(\"Line 3   -   Value of c is %d \\ n\", c )  c = a / b  fmt.Printf(\"Line 4   -   Value of c is %d \\ n\", c )  c = a % b  fmt.Printf(\"Line 5   -   Value of c is %d \\ n\", c )  a++  fmt.Printf(\"Line 6   -   Value of a is %d \\ n\", a )  a --  fmt.Printf(\"Line   7   -   Value of a is %d \\ n\", a )  }  When you compile and execute the above program, it produces the following result:\nGo Programming  31  Line 1   -   Value of c is 31  Line 2   -   Value of c is 11  Line 3   -   Value of c is 210  Line 4   -   Value of c is 2  Line 5   -   Value of c is 1  Line 6   -   Value   of a is 22  Line 7   -   Value of a is 21  Relational Operators  The   f ollowing   table   lists   all   the relational   operators   supported   by Go language. Assume  variable   A   holds 10 and variable   B   holds 20, then:  Operator   Description   Example  ==   It   c hecks if the values of two operands are equal or  not ;   if yes ,   the   condition becomes true. (A == B) is not   true. !=  It   c hecks if the values of two operands are equal or  not ;   if   the   values are not equal ,   then   the   condition  becomes true. (A != B) is true. >  It   c hecks if the value of left operand is greater than  the value of right operand ;   if yes ,   the   condition  becomes true. (A > B) is not true. <  It   c hecks if the value of left operand","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"1BAim3ScX3hN+lpTOIkV+lQa1k4Df9p0Mu3HznhkSYk="},"8c051f76-8db3-4305-bc86-988454342bba":{"id_":"8c051f76-8db3-4305-bc86-988454342bba","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":31},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"8e0f9384-7ac7-4e34-8edc-238895dbe15b","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":31},"hash":"yJy7TFTwmEMyR8uj3IlOfFd5M7uFhj67UGDlpPFr1c4="}},"text":"It   c hecks if the value of left operand is greater than  the value of right operand ;   if yes ,   the   condition  becomes true. (A > B) is not true. <  It   c hecks if the value of left operand is less than the  value of   the   right operand ;   if yes ,   the   condition  becomes true. (A < B) is true. >=  It   c hecks if the value of   the   left operand is greater  than or equal to the value of   the   right operand ;   if  yes ,   the   condition becomes true. (A >= B) is not true. <=  It c hecks if the value of left operand is less than or  equal   to the   value   of   right   operand ;   if yes ,   the  condition becomes true. (A <= B) is true. Example  Try   the   following   example   to   understand   all   the   relational   operators   available   in   Go  programming language:\nGo Programming  32  package main  import \"fmt\"  func main() {  var a int = 21  var b int = 10  if( a == b ) {  fmt.Printf(\"Line 1   -   a is equal to b \\ n\" )  } else {  fmt.Printf(\"Line 1   -   a is not equal to b \\ n\" )  }  if ( a < b ) {  fmt.Printf(\"Line 2   -   a is less than b \\ n\" )  } else {  fmt.Printf(\"Line 2   -   a is not less than b \\ n\" )  }  if ( a > b ) {  fmt.Printf(\"Line 3   -   a is greater than b \\ n\" )  } else {  fmt.Printf(\"Line 3   -   a is not greater than b \\ n\" )  }  /* Lets change value of a and b */  a = 5  b = 20  if ( a <= b ) {  fmt.Printf(\"Line 4   -   a is ei ther less than or equal to   b \\ n\" )  }  if ( b >= a ) {  fmt.Printf(\"Line 5   -   b is either greater than   or equal to b \\ n\" )  }\nGo Programming  33  }  When you compile and execute the above program ,   it produces the following result:  Line 1   -   a is not equal to b  Line 2   -   a is not less than b  Line 3   -   a is greater than b  Line 4   -   a is either less than or eq","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"dJHmjNrXLF3+Nmlp54vOopmfTWgreQFg1YgA1o7a4v0="},"5825a192-21e9-4eb8-997f-3f5a3669402f":{"id_":"5825a192-21e9-4eb8-997f-3f5a3669402f","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":32},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"a41572d8-8a35-425c-8c6d-92f1488f5f3f","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":32},"hash":"0BdB5fLJ+I5ChgipkxY+vSk4Q1HLudJvzeQ5XqvUfmk="}},"text":"the above program ,   it produces the following result:  Line 1   -   a is not equal to b  Line 2   -   a is not less than b  Line 3   -   a is greater than b  Line 4   -   a is either less than or equal to   b  Line 5   -   b is either greater than   or equal to b  Logical Operators  The   f ollowing table   lists   all the logical operators supported by Go language. Assume variable  A   holds 1 and variable   B   holds 0, then:  Operator   Description   Example  &&   Called   Logical AND operator. If both the operands are  non - zero, then condition becomes true. (A && B) is false. ||   Called Logical OR Operator. If any of the two operands  is non - zero, then condition becomes true. (A || B) is true. ! Called   Logical   NOT   Operator. Use   to   reverses   the  logical state of its operand. If a condition is true ,   then  Logical NOT operator will make false. !(A && B) is true. The   f ollowing table shows all the logical operators supported by Go language. Assume variable  A   holds true and   variable   B   holds false, then:  Operator   Description   Example  &&   Called Logical AND operator. If both the operands are  false, then   the   condition becomes false. (A && B) is false. ||   Called Logical OR Operator. If any of the two operands  is true, then   the   condition becomes true. (A || B) is true. ! Called   Logical   NOT   Operator. Use   to   reverses   the  logical state of its operand. If a condition is true ,   then  Logical NOT operator will make   it   false. !(A && B) is true. Go Programming  34  Example  Try the following example to   understand all the logical operators available in Go programming  language:  package   main  import   \"fmt\"  func main ()   {  var   a   bool   =   true  var   b   bool   =   false  if   (   a","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"QUuGDF62ibwR4XvGUqxwJVaPebiJ63cF+uzSTEw878k="},"aac0758f-206e-4682-b020-12fa46eeb70a":{"id_":"aac0758f-206e-4682-b020-12fa46eeb70a","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":33},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"23dd1295-b130-4764-9bf5-a9f19da162d1","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":33},"hash":"UJroDerWqSY+uQbSBASL3HbvYzKmeyNHdI5uKCteh4I="}},"text":"e to   understand all the logical operators available in Go programming  language:  package   main  import   \"fmt\"  func main ()   {  var   a   bool   =   true  var   b   bool   =   false  if   (   a   &&   b   )   {  fmt . Printf ( \"Line 1   -   Condition is true \\ n\"   )  }  if   (   a   ||   b   )   {  fmt . Printf ( \"Line 2   -   Condition is true \\ n\"   )  }  /* lets change the value of   a and b */  a   =   false  b   =   true  if   (   a   &&   b   )   {  fmt . Printf ( \"Line 3   -   Condition is true \\ n\"   )  }   else   {  fmt . Printf ( \"Line 3   -   Condition is not true \\ n\"   )  }  if   (   !( a   &&   b )   )   {  fmt . Printf ( \"Line 4   -   Condition is true \\ n\"   )  }  }  When you compile and execute the above program ,   it produces the following result:  Line 2   -   Condition is true\nGo Programming  35  Line 3   -   Condition is not true  Line 4   -   Condition is true  Bitwise Operators  Bitwise operator s   work   on bits and perform bit - by - bit operation. The truth tables for &, |, and  ^ are as follows:  p   q   p & q   p | q   p ^ q  0   0   0   0   0  0   1   0   1   1  1   1   1   1   0  1   0   0   1   1  Assume   A = 60; and B = 13 . I n binary format ,   they will be as follows:  A = 0011 1100  B = 0000 1101  -----------------  A&B = 0000 1100  A|B = 0011 1101  A^B = 0011 0001  ~A   = 1100 0011  The Bitwise operators supported by C language are listed in the following table. Assume  variable A holds 60 and variable   B holds 13, then:  Operator   Description   Example  &   Binary AND Operator copies a bit to the  result if it exists in both operands. (A & B) will give 12, which  is 0000 1100  |   Binary OR Operator copies a bit if it exists  in either operand. (A | B) will give   61, which is  0011 1101\nGo Programming  36  ^   Binar","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"8GffXgph6uaaGdM0mOYYwnBuQgLab8JHt54B/A+JgII="},"6c53419c-6d00-449e-8a77-bff306078f7e":{"id_":"6c53419c-6d00-449e-8a77-bff306078f7e","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":34},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"ac96fb32-dde8-4cab-8a15-a466a0e34c83","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":34},"hash":"ugkImBWa0Ns/LV95hjUj+BlrdGILHKgLN0ohINVs6JU="}},"text":"th operands. (A & B) will give 12, which  is 0000 1100  |   Binary OR Operator copies a bit if it exists  in either operand. (A | B) will give   61, which is  0011 1101\nGo Programming  36  ^   Binary XOR Operator copies the bit if it is  set in one operand but not both. (A ^ B) will give 49, which  is 0011 0001  <<  Binary   Left   Shift   Operator. The   left  operands   value   is   moved   left   by   the  number   of   bits   specified   by   the   right  operand. A << 2 will give 240 which  is 1111 0000  >>  Binary   Right   Shift   Operator. The   left  operands   value   is   moved   right   by   the  number   of   bits   specified   by   the   right  operand. A >> 2 will give 15 which is  0000 1111  Example  Try the following example   to understand all the bitwise operators available in Go programming  language:  package main  import \"fmt\"  func main() {  var a uint = 60   /* 60 = 0011 1100 */  var b uint = 13   /* 13 = 0000 1101 */  var c uint = 0  c = a & b   /* 12 = 0000 1100 */  fmt.Printf(\"Line 1   -   Value of c is %d \\ n\", c )  c = a | b   /* 61 = 0011 1101 */  fmt.Printf(\"Line 2   -   Value of c is %d \\ n\", c )  c = a ^ b   /* 49 = 0011 0001 */  fmt.Printf(\"Line 3   -   Value of c   is %d \\ n\", c )\nGo Programming  37  c = a << 2   /* 240 = 1111 0000 */  fmt.Printf(\"Line 4   -   Value of c is %d \\ n\", c )  c = a >> 2   /* 15 = 0000 1111 */  fmt.Printf(\"Line 5   -   Value of c is %d \\ n\", c )  }  When you compile and execute the above program ,   it produces the following result:  Line 1   -   Value of c is 12  Line 2   -   Value of c is 61  Line 3   -   Value of c is 49  Line 4   -   Value of c is 240  Line 5   -   Value of c is 15  Assignment Operators  The   following   table lists all the   assignment operators sup ported by Go language:  Ope","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"CNvUHkXtroJGH0ROYP54j3LP4oBdAl9hNodd7RazrrI="},"fe65022d-b413-47c8-97bd-3df695836637":{"id_":"fe65022d-b413-47c8-97bd-3df695836637","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":35},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"11475ae4-0ef0-431b-980c-e9dff47f188d","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":35},"hash":"CVqhO7/xsaloTqYoJu+fqmND6yjqN5wKI6pkd2lIuWM="}},"text":"-   Value of c is 49  Line 4   -   Value of c is 240  Line 5   -   Value of c is 15  Assignment Operators  The   following   table lists all the   assignment operators sup ported by Go language:  Operator   Description   Example  =  Simple   assignment   operator,   Assigns  values from   right side operands to left  side operand  C = A + B   assign s   the   value of  A + B into C  +=  Add AND   assignment   operator,   It adds  right   operand   to   the   left   operand   and  assign the result to left operand  C += A is equivalent to C = C  + A  - =  Subtract   AND   assignment   operator,   It  subtracts   right   operand   from   the   left  operand   and   assign   the   result   to   left  operand  C   - = A is equivalent to C = C   -  A  *=   Multiply   AND   assignment   operator,   It  multiplies   right   operand   with   the   left  C *= A is equivalent to C = C  * A\nGo Programming  38  operand   and   assign   the   result   to   left  operand  /=  Divide   AND   assignment   operator,   It  divides   left   operand   with   the   right  operand   and   assign   the   result   to   left  operand  C /= A is equivalent to C = C /  A  %=  Modulus   AND   assignment   operator,   It  takes modulus using two operands and  assign the result to left operand  C %= A is equivalent to C = C  % A  <<=   Left shift AND assignment operator   C <<= 2 is same as C = C   <<  2  >>=   Right shift AND assignment operator   C >>= 2 is same as C = C >>  2  &=   Bitwise AND assignment operator   C &= 2 is same as C = C & 2  ^=   bitwise   exclusive   OR   and   assignment  operator   C ^= 2 is same as C = C ^ 2  |=   bitwise   inclusive   OR   and   assignment  operator   C |= 2 is same as C = C | 2  Example  Try   the   following   example   to   understand   all   the   ass","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"S0TpKtJeWJPmNdPXml+Y9Kwmwzrym0WwzQwyvFO2Jos="},"504aa779-3dc8-4a87-a950-6bf96b4e5e9f":{"id_":"504aa779-3dc8-4a87-a950-6bf96b4e5e9f","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":36},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"7f3939f0-5d93-4e78-baae-0de0c8810f73","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":36},"hash":"P+qta68md5xBqaEo+bZdtVhqhoRjcVa0W5sXUolBMUM="}},"text":"or   C ^= 2 is same as C = C ^ 2  |=   bitwise   inclusive   OR   and   assignment  operator   C |= 2 is same as C = C | 2  Example  Try   the   following   example   to   understand   all   the   assignment   operators   available   in   Go  programming language:  package   main  import   \"fmt\"  func main ()   {  var   a   int   =   21  var   c   int  c   =   a  fmt . Printf ( \"Line 1   -   =   Operator Example, Value of c = %d \\ n\" ,   c   )\nGo Programming  39  c   +=   a  fmt . Printf ( \"Line 2   -   += Operator Example, Value of c = %d \\ n\" ,   c   )  c   - =   a  fmt . Printf ( \"Line 3   -   - = Operator Example, Value of c = %d \\ n\" ,   c   )  c   *=   a  fmt . Printf ( \"Line   4   -   *= Operator Example, Value of c = %d \\ n\" ,   c   )  c   /=   a  fmt . Printf ( \"Line 5   -   /= Operator Example, Value of c = %d \\ n\" ,   c   )  c   =   200 ;  c   <<=   2  fmt . Printf ( \"Line 6   -   <<= Operator Example, Value of c = %d \\ n\" ,   c   )  c   >>=   2  fmt . Printf ( \"Line 7   -   >>= Operator Example, Value of c = %d \\ n\" ,   c   )  c   &=   2  fmt . Printf ( \"Line 8   -   &= Operator Example, Value of c = %d \\ n\" ,   c   )  c   ^=   2  fmt . Printf ( \"Line 9   -   ^= Operator Example, Value of c = %d \\ n\" ,   c   )  c   |=   2  fmt . Printf ( \"Line 10   -   |= Operator Example, Value of c = %d \\ n\" ,   c   )  }  When you compile and execute the above program ,   it produces the following result:\nGo Programming  40  Line 1   -   =   Operator Example, Value of c = 21  Line 2   -   += Operator Example, Value of c = 42  Line 3   -   - = Operator Example,   Value of c = 21  Line 4   -   *= Operator Example, Value   of c = 441  Line 5   -   /= Operator Example, Value of c = 21  Line 6   -   <<= Operator Example, Value of c = 800  Line 7   -   >>= Operator Example, Valu","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"0LBOYdAnu1ln4dxO7Et+zvCkKtTF8AAVJ4Vw7qO4Cxs="},"5e629dac-57d6-4299-a774-c48ab3e9eb7a":{"id_":"5e629dac-57d6-4299-a774-c48ab3e9eb7a","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":37},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"1321afbc-0279-4ce8-a708-3b3f4daae425","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":37},"hash":"493lsbvpkpbgabvFsQeHPQFxnY30lcUkY3twHPZeaMs="}},"text":"1  Line 4   -   *= Operator Example, Value   of c = 441  Line 5   -   /= Operator Example, Value of c = 21  Line 6   -   <<= Operator Example, Value of c = 800  Line 7   -   >>= Operator Example, Value of c = 200  Line 8   -   &= Operator Example, Value of c = 0  Line 9   -   ^= Operator Example, Value of c = 2  Line 10   -   |= Operator Example, Value of c = 2  Misc ellaneous   Operators  There are   a   few other important operators   supported by Go Language   including   sizeof   and   ? : . Operator   Description   Example  &   Returns the address of a   variable. &a;   provides   actual   address   of   the  variable. *   Pointer to a variable. *a;   provides   pointer to a variable. Example  Try   following   example   to   understand   all   the   miscellaneous   operators   available   in   Go  programming language:  package   main  import   \"fm t\"  func main ()   {  var   a   int   =   4  var   b int32  var   c float32  var   ptr   * int\nGo Programming  41  /* example of type operator */  fmt . Printf ( \"Line 1   -   Type of variable a = %T \\ n\" ,   a   );  fmt . Printf ( \"Line 2   -   Type of variable b = %T \\ n\" ,   b   );  fmt . Printf ( \"Line 3   -   Type of variable c= %T \\ n\" ,   c   );  /* example of & and * operators */  ptr   =   & a   /* 'ptr' now contains the address of 'a'*/  fmt . Printf ( \"value of a is   %d \\ n\" ,   a );  fmt . Printf ( \"*ptr is %d. \\ n\" ,   * ptr );  }  When you compile and execute the above program ,   it produces the following result:  Line 1   -   Type of variable a = int  Line 2   -   Type of   variable b = int32  Line 3   -   Type of variable c= float32  value of a is   4  *ptr is 4. Operators Precedence in Go  Operator precedence determines the grouping of terms in an expression. This affects how an  expression is","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"aTrLFT2GKSxyGZeB/T9n0g/cMXG3RrZRWkqzKM44+OQ="},"a0e798d1-1383-4895-997a-c76966685e9b":{"id_":"a0e798d1-1383-4895-997a-c76966685e9b","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":38},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"5fe2a7be-b946-4558-a1d8-d82b2851fa44","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":38},"hash":"sqFGu/o2lsq1voIJzvYOPqB4fBIVQFFTzcxrgLXBc9o="}},"text":"-   Type of variable c= float32  value of a is   4  *ptr is 4. Operators Precedence in Go  Operator precedence determines the grouping of terms in an expression. This affects how an  expression is evaluated. Certain operators have highe r precedence than others; for example,  the multiplication operator has higher precedence than the addition operator. For example x = 7 + 3 * 2; here, x is assigned 13, not 20 because operator * has higher  precedence than +, so it first gets multiplied with   3*2 and then adds into 7. Here, operators with the highest precedence appear at the top of the table,   and   those with  the lowest appear at the bottom. Within an expression, higher precedence operators will be  evaluated first. Category   Operator   Associativity  Postfix   () []   - > . ++   -   -   Left to right  Unary   +   -   ! ~ ++   -   -   (type)* & sizeof   Right to left  Multiplicative   * / %   Left to right\nGo Programming  42  Additive   +   -   Left to right  Shift   << >>   Left to right  Relational   < <= > >=   Left to right  Equality   == !=   Left to right  Bitwise AND   &   Left to right  Bitwise XOR   ^   Left to right  Bitwise OR   |   Left to right  Logical AND   &&   Left to   right  Logical OR   ||   Left to right  Conditional   ?:   Right to left  Assignment   = +=   - = *= /= %=>>= <<= &= ^=  |=   Right to left  Comma   ,   Left to right  Example  Try   the   following   example   to   understand   the   operator   precedence   available   in   Go  programming language:  package   main  import   \"fmt\"  func main ()   {  var   a   int   =   20  var   b   int   =   10  var   c   int   =   15  var   d   int   =   5  var   e   int ;\nGo Programming  43  e   =   ( a   +   b )   *   c   /   d ;   // ( 30 * 15 ) / 5  fmt . Printf ( \"Value of (a + b) * c","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"EIvyEoTs8El/RzRAs0tVOnMgcSj2UwYCDkAYu/CUXjU="},"c3f726af-f05a-4297-aaa2-2e6089db0527":{"id_":"c3f726af-f05a-4297-aaa2-2e6089db0527","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":39},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"95592602-c10a-4251-b565-03691364769a","metadata":{"domain":"go","filename":"go_tutorial.pdf","chunk":39},"hash":"h8+PE07auNR4mvxCL70J/fvb/rZprbyeEECgd8cUrl8="}},"text":"b   int   =   10  var   c   int   =   15  var   d   int   =   5  var   e   int ;\nGo Programming  43  e   =   ( a   +   b )   *   c   /   d ;   // ( 30 * 15 ) / 5  fmt . Printf ( \"Value of (a + b) * c / d is : %d \\ n\" ,   e   );  e   =   (( a   +   b )   *   c )   /   d ;   // (30 * 15 ) / 5  fmt . Printf ( \"Value of ((a + b) * c) / d is   : %d \\ n\"   ,   e   );  e   =   ( a   +   b )   *   ( c   /   d );   // (30) * (15/5)  fmt . Printf ( \"Value of (a + b) * (c / d) is   : %d \\ n\" ,   e   );  e   =   a   +   ( b   *   c )   /   d ;   //   20 +   (150/5)  fmt . Printf ( \"Value of a + (b * c) / d is   : %d \\ n\"   ,   e   );  }  When you compile and execute the above program ,   it produces the following result:  Value of (a + b) * c / d is : 90  Value of ((a + b) * c) / d is   : 90  Value of (a + b) * (c / d) is   :   90  Value of a + (b * c) / d is   : 50\nGo Programming  44  End of ebook preview  If you liked what you saw…  Buy it from our store @   https://store.tutorialspoint.com","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"bGfbqRiyK7D+9QdAqdfDREAY71v5di9WbzuqvrG7NSE="}},"type":"simple_dict"}}}